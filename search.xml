<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>基于hexo框架实现双部署(友好)</title>
    <url>/2021/08/24/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>-blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/08/24/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><p><a href="http://www.jianshu.com/">首页-简书</a></p>
<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>测试代码</title>
    <url>/2021/08/26/%E4%BB%A3%E7%A0%81%E5%9D%97%E6%B5%8B%E8%AF%95/%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;你好&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">`这里使用了sticky属性可以置顶哦`</span></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>JS基础</title>
    <url>/2021/08/28/js/01-JS%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="JS基础复习"><a href="#JS基础复习" class="headerlink" title="JS基础复习"></a>JS基础复习</h2><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><blockquote>
<p>基本(值)类型</p>
<ul>
<li>String//任意的字符串</li>
<li>Number//任意的数字</li>
<li>boolean//true/false</li>
<li>undefined</li>
<li>null</li>
<li>Symbol() 表示独一无二的值,用来解决命名冲突的问题</li>
</ul>
<p>对象(引用)类型</p>
<ul>
<li>Object: 任意对象</li>
<li>Function: 一种特别的对象(可以执行)</li>
<li>Array: 一种特别的对象(属性为:数值下标属性, 内部数据是有序的)</li>
</ul>
<h6 id="如何判断"><a href="#如何判断" class="headerlink" title="如何判断"></a>如何判断</h6><ul>
<li>typeof   返回数据类型的<strong>字符串表达</strong>   ‘string’ ‘number’ 都是<strong>小写</strong></li>
<li>不能区分null和object，  object和array</li>
<li>instanceof ：判断对象的具体类型</li>
<li>b instanceof Object  //翻译为 b是不是 object的实例，返回值为true/false</li>
<li>=== / == （会做数据转换）可以判断 null 和 undefined</li>
</ul>
<p>实例：  由构造函数创建的对象</p>
</blockquote>
<h6 id="两个小问题"><a href="#两个小问题" class="headerlink" title="两个小问题"></a>两个小问题</h6><ol>
<li>undefined和null的区别？</li>
</ol>
<blockquote>
<p>undefined代表定义了未赋值</p>
<p>null代表定义了赋值了，只是值为null（object类型）</p>
</blockquote>
<ol>
<li>什么时候给变量赋值为null呢？</li>
</ol>
<blockquote>
<p>初始赋值      为null是为了将来要赋值为对象</p>
<p>最后赋值      将对象变成垃圾对象（没有地址指向这个对象），回收对象</p>
</blockquote>
<h4 id="数据——变量——内存"><a href="#数据——变量——内存" class="headerlink" title="数据——变量——内存"></a>数据——变量——内存</h4><p>​    什么是数据?</p>
<blockquote>
<p>存储在内存中代表了特定信息的‘东东’，本质上是0101。。</p>
<p>数据的特点：可传递，可运算，赋值的本质是将一个数据的<strong>内容</strong>传递给另一个变量</p>
<p>一切皆数据</p>
<p>内存中所有操作的目标都是数据，</p>
</blockquote>
<p>​    什么是内存？</p>
<blockquote>
<p>内存条通电之后产生的可存储数据的空间（临时的）</p>
<p>内存产生和死亡：</p>
<ul>
<li>内存条（）==》通电==》产生内存空间==》存储数据==》处理数据==》断电==》内存空间和数据都消失</li>
<li>一块小内存的两个数据</li>
<li>内部存储的数据</li>
<li>地址值</li>
</ul>
<p>内存的分类   栈和堆</p>
<ul>
<li>栈中：全局变量 和 局部变量</li>
<li>堆： 对象</li>
</ul>
</blockquote>
<p>​    什么是变量？</p>
<blockquote>
<p>可变化的量： 由变量名和变量值组成</p>
<p>每个变量都对应一块小内存，变量名用来查找对应的内存，变量值就是内存中保存的数据</p>
</blockquote>
<p>​    内存，数据，变量三者之间的关系</p>
<blockquote>
<p>内存用来临时存储数据的空间</p>
<p>变量名是内存的标识，变量的值是存储在内存的数据</p>
</blockquote>
<p><strong>js调用函数传递的参数是一个值传递</strong>，函数执行完内存直接释放</p>
<h3 id="JS引擎如何管理内存"><a href="#JS引擎如何管理内存" class="headerlink" title="JS引擎如何管理内存"></a>JS引擎如何管理内存</h3><p>​    1.内存生命周期</p>
<blockquote>
<p>分配小内存空间，得到它的使用权</p>
<p>存储数据，可以重复进行操作</p>
<p>释放小内存的空间（对象的内存空间占的比较大）</p>
</blockquote>
<p>​    局部变量在函数调用的时候创建，函数调用完释放</p>
<p>​</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> b = &#123;&#125;</span><br><span class="line">	&#125;</span><br><span class="line">fn()</span><br><span class="line"><span class="comment">//b是在调用fn函数时创建，在调用完之后自动释放，而fn所指向的对是在某个时刻（成为垃圾对象）被垃圾回收器回收</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
</search>
